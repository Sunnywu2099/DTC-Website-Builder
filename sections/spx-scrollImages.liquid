<style>
  .scroll-imgs{
      width: 100%;
      height: 100vh; /* 设置为视口高度 */
      background: #000;
      overflow: hidden; /* 隐藏溢出部分 */
  }
  .sticky-wrapper{
      height: 100vh;
      margin: 0 auto;
  }
  #scrolling{
      width: 100%;
      height: 100%;
  }
  @media only screen and (max-width: 1000px){

  }
  @media only screen and (max-width: 768px){

  }
</style>

<div class="scroll-imgs">
  <div class="sticky-wrapper">
    <canvas id="scrolling"></canvas>
  </div>
</div>

<script type="module">
    
    gsap.registerPlugin(ScrollTrigger);

    const canvas = document.getElementById("scrolling");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    const context = canvas.getContext("2d");
    const frameCount = 200;
    const img = new Image();
    img.setAttribute('crossOrigin', 'anonymous');
    let index = 0;


    function picFn(index) {
      const paddedIndex = index.toString().padStart(4, '0');
      return `https://cdn.shopify.com/s/files/1/0644/1870/9653/files/${paddedIndex}.jpg`;
    }

    const render = function () {
      img.src = picFn(index);
      img.onload = function () {
        const scale = 1.1;
        context.clearRect(0, 0, canvas.width, canvas.height);
        //const imageAspectRatio = img.width / img.height;
        //const canvasAspectRatio = canvas.width / canvas.height;
        //let renderWidth, renderHeight, x, y;
        //if (imageAspectRatio > canvasAspectRatio) {
          //renderWidth = canvas.width;
          //renderHeight = renderWidth / imageAspectRatio;
          //x = 0;
          //y = (canvas.height - renderHeight) / 2;
        //} else {
          //renderHeight = canvas.height;
          //renderWidth = renderHeight * imageAspectRatio;
          //y = 0;
          //x = (canvas.width - renderWidth) / 2;
        //}

        // 计算缩放后的宽高
        const scaledWidth = img.width * scale;
        const scaledHeight = img.height * scale;

        // 计算中心点
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;

        // 移动绘制原点到中心点
        context.translate(centerX, centerY);

        // 进行缩放
        context.scale(scale, scale);

        // 将图像移到中心点，上半部分可见
        context.drawImage(img, -scaledWidth / 2, -scaledHeight / 3.5, scaledWidth, scaledHeight);

        // 还原绘制原点
        context.setTransform(1, 0, 0, 1, 0, 0);

        //context.drawImage(img, x, y, renderWidth * scale, renderHeight * scale );
      };
    };

    // 使用 ScrollTrigger 实现滚动触发
    ScrollTrigger.create({
      trigger: '.scroll-imgs',
      start: 'top top',
      end: '+=2000',
      markers: false,
      pin: true,
      scrub: 0.1,
        onUpdate: (self) => {
          const percent = self.progress;
          index = Math.min(199, Math.ceil(percent * 199));
          render();
        },
    })

    // 预加载图片
    const preloadImages = () => {
      for (let i = 1; i < frameCount; i++) {
        const img = new Image();
        img.src = picFn(i);
      }
    };

    window.onload = function () {
      preloadImages();
      render();
    };
</script>

{% schema %}
  {
    "name": "SPX Scroll images",
    "settings": [
      {
        "type": "textarea",
        "id": "text",
        "label": "Text"
      }
    ],
  "presets": [
    {
      "name": "SPX Scroll images"
    }
  ]
    
  }
{% endschema %}